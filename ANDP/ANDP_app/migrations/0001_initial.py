# Generated by Django 5.2.4 on 2025-09-26 10:43

import django.contrib.gis.db.models.fields
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="PublicUpload",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("file", models.FileField(upload_to="uploads/public/")),
                ("session_id", models.CharField(blank=True, max_length=64)),
                (
                    "original_filename",
                    models.CharField(default="unknown_file.pdf", max_length=255),
                ),
                (
                    "processing_status",
                    models.CharField(
                        choices=[
                            ("uploaded", "Téléchargé"),
                            ("ocr_processing", "Extraction OCR en cours"),
                            ("ocr_completed", "OCR terminé"),
                            ("coordinates_extracted", "Coordonnées extraites"),
                            ("geometry_created", "Géométrie créée"),
                            ("spatial_verification", "Vérification spatiale en cours"),
                            ("verification_completed", "Validation terminée"),
                            ("comparison_completed", "Comparaison foncière terminée"),
                            ("completed", "Traitement complet"),
                            ("error", "Erreur"),
                        ],
                        default="uploaded",
                        max_length=50,
                    ),
                ),
                ("processed", models.BooleanField(default=False)),
                ("processing_log", models.JSONField(default=list)),
                ("error_message", models.TextField(blank=True, null=True)),
                ("processing_time", models.FloatField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("completed_at", models.DateTimeField(blank=True, null=True)),
            ],
            options={
                "verbose_name": "Upload de levée topographique",
                "verbose_name_plural": "Uploads de levées topographiques",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="Parcel",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "geometry",
                    django.contrib.gis.db.models.fields.PolygonField(
                        blank=True, null=True, srid=32631
                    ),
                ),
                (
                    "centroid",
                    django.contrib.gis.db.models.fields.PointField(
                        blank=True, null=True, srid=32631
                    ),
                ),
                ("area", models.FloatField(blank=True, null=True)),
                ("perimeter", models.FloatField(blank=True, null=True)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("secure", "Sécurisé - Aucun conflit détecté"),
                            ("warning", "Attention - Vérifications requises"),
                            ("conflict", "Conflit - Problèmes détectés"),
                            ("invalid", "Invalide - Géométrie incorrecte"),
                        ],
                        default="invalid",
                        max_length=20,
                    ),
                ),
                ("issues", models.JSONField(default=list)),
                ("recommendations", models.JSONField(default=list)),
                ("verification_completed", models.BooleanField(default=False)),
                ("verification_date", models.DateTimeField(blank=True, null=True)),
                ("verification_details", models.JSONField(default=dict)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "upload",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="parcel",
                        to="ANDP_app.publicupload",
                    ),
                ),
            ],
            options={
                "verbose_name": "Parcelle",
                "verbose_name_plural": "Parcelles",
            },
        ),
        migrations.CreateModel(
            name="OCRResult",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("raw_text", models.TextField()),
                ("corrected_text", models.TextField(blank=True)),
                ("confidence_score", models.FloatField(default=0.0)),
                (
                    "processing_method",
                    models.CharField(
                        choices=[
                            ("tesseract", "Tesseract"),
                            ("paddleocr", "PaddleOCR"),
                            ("hybrid", "Hybride"),
                            ("ultra_precise", "Ultra Précis"),
                        ],
                        default="ultra_precise",
                        max_length=20,
                    ),
                ),
                (
                    "extraction_method",
                    models.CharField(default="hybrid", max_length=50),
                ),
                ("extraction_metadata", models.JSONField(default=dict)),
                ("coordinates_found", models.IntegerField(default=0)),
                ("extracted_coordinates", models.JSONField(default=list)),
                ("validated_coordinates", models.JSONField(default=list)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "upload",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="ocr_result",
                        to="ANDP_app.publicupload",
                    ),
                ),
            ],
            options={
                "verbose_name": "Résultat OCR",
                "verbose_name_plural": "Résultats OCR",
            },
        ),
        migrations.CreateModel(
            name="SpatialVerification",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "En attente"),
                            ("processing", "En cours"),
                            ("completed", "Terminé"),
                            ("error", "Erreur"),
                        ],
                        default="pending",
                        max_length=20,
                    ),
                ),
                ("has_conflicts", models.BooleanField(default=False)),
                ("conflict_count", models.IntegerField(default=0)),
                ("double_vente_detected", models.BooleanField(default=False)),
                ("protected_area_overlap", models.BooleanField(default=False)),
                ("restriction_overlap", models.BooleanField(default=False)),
                ("cadastre_inconsistency", models.BooleanField(default=False)),
                ("verification_details", models.JSONField(default=dict)),
                ("processing_time", models.FloatField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("completed_at", models.DateTimeField(blank=True, null=True)),
                (
                    "parcel",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="spatial_verification",
                        to="ANDP_app.parcel",
                    ),
                ),
            ],
            options={
                "verbose_name": "Vérification Spatiale",
                "verbose_name_plural": "Vérifications Spatiales",
            },
        ),
        migrations.CreateModel(
            name="SpatialConflict",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "conflict_type",
                    models.CharField(
                        choices=[
                            ("intersection", "Intersection avec parcelle existante"),
                            ("within_protected", "Dans une aire protégée"),
                            ("within_restriction", "Dans une zone de restriction"),
                            ("overlap_dpl", "Chevauchement avec DPL"),
                            ("overlap_dpm", "Chevauchement avec DPM"),
                            (
                                "cadastre_difference",
                                "Différence avec cadastre existant",
                            ),
                            ("litigation_zone", "Zone litigieuse"),
                        ],
                        max_length=30,
                    ),
                ),
                (
                    "severity",
                    models.CharField(
                        choices=[
                            ("low", "Faible"),
                            ("medium", "Moyen"),
                            ("high", "Élevé"),
                            ("critical", "Critique"),
                        ],
                        default="medium",
                        max_length=20,
                    ),
                ),
                (
                    "conflict_geometry",
                    django.contrib.gis.db.models.fields.GeometryField(
                        blank=True, null=True, srid=32631
                    ),
                ),
                ("overlap_area", models.FloatField(blank=True, null=True)),
                ("overlap_percentage", models.FloatField(blank=True, null=True)),
                ("conflicting_layer", models.CharField(max_length=50)),
                ("conflicting_object_id", models.IntegerField()),
                ("description", models.TextField()),
                ("recommendation", models.TextField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "verification",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="conflicts",
                        to="ANDP_app.spatialverification",
                    ),
                ),
            ],
            options={
                "verbose_name": "Conflit Spatial",
                "verbose_name_plural": "Conflits Spatiaux",
            },
        ),
        migrations.AddIndex(
            model_name="parcel",
            index=models.Index(fields=["status"], name="ANDP_app_pa_status_d3f6eb_idx"),
        ),
        migrations.AddIndex(
            model_name="parcel",
            index=models.Index(
                fields=["verification_completed"], name="ANDP_app_pa_verific_7abf69_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="spatialconflict",
            index=models.Index(
                fields=["conflict_type"], name="ANDP_app_sp_conflic_df152c_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="spatialconflict",
            index=models.Index(
                fields=["severity"], name="ANDP_app_sp_severit_c1c1c0_idx"
            ),
        ),
    ]
