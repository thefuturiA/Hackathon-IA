#!/usr/bin/env python3
"""
Extracteur avec VALIDATION DE S√âQUENCE LOGIQUE
Garantit qu'on ne peut pas avoir B2 sans B1, B3 sans B1-B2, etc.
"""

import os
import sys
import re
from typing import List, Dict, Tuple

# Ajouter le chemin du projet Django
sys.path.append('.')
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'ANDP.settings')

import django
django.setup()

from final_production_extractor import FinalProductionExtractor

class SequenceLogicalExtractor(FinalProductionExtractor):
    """
    Extracteur avec validation de s√©quence LOGIQUE
    Garantit la coh√©rence des s√©quences de bornes
    """
    
    def extract_coordinates_with_logical_sequence(self, img_path: str, mode: str = "balanced") -> List[Dict]:
        """
        Extraction avec validation de s√©quence LOGIQUE
        
        R√®gles:
        - On ne peut pas avoir B2 sans B1
        - On ne peut pas avoir B3 sans B1 et B2
        - La s√©quence doit √™tre logiquement coh√©rente
        """
        
        print(f"üß† EXTRACTION AVEC S√âQUENCE LOGIQUE pour {os.path.basename(img_path)}")
        print("="*60)
        print("‚ö†Ô∏è  VALIDATION: Pas de B2 sans B1, pas de B3 sans B1-B2, etc.")
        
        # Extraction normale d'abord
        raw_coords = super().extract_coordinates_final_production(img_path, mode=mode)
        
        # Validation de s√©quence logique
        logical_coords = self._validate_logical_sequence(raw_coords)
        
        return logical_coords
    
    def _validate_logical_sequence(self, coordinates: List[Dict]) -> List[Dict]:
        """Valide et corrige la s√©quence logique"""
        
        print(f"\nüß† VALIDATION DE S√âQUENCE LOGIQUE:")
        
        if not coordinates:
            print("   ‚ùå Aucune coordonn√©e √† valider")
            return []
        
        # Extraire les num√©ros de bornes
        borne_numbers = []
        borne_dict = {}
        
        for coord in coordinates:
            try:
                # Extraire le num√©ro de la borne (ignorer les erreurs comme B839)
                match = re.match(r'B(\d+)', coord['borne'])
                if match:
                    num = int(match.group(1))
                    # Ignorer les num√©ros aberrants (> 20 par exemple)
                    if num <= 20:
                        borne_numbers.append(num)
                        borne_dict[num] = coord
            except:
                continue
        
        borne_numbers.sort()
        
        print(f"   üìç Bornes brutes trouv√©es: {[f'B{n}' for n in borne_numbers]}")
        
        # Validation de s√©quence logique
        valid_sequence = self._build_logical_sequence(borne_numbers, borne_dict)
        
        print(f"   ‚úÖ S√©quence logique valid√©e: {[coord['borne'] for coord in valid_sequence]}")
        
        return valid_sequence
    
    def _build_logical_sequence(self, borne_numbers: List[int], borne_dict: Dict[int, Dict]) -> List[Dict]:
        """Construit une s√©quence logiquement coh√©rente"""
        
        if not borne_numbers:
            return []
        
        # Cas 1: Si on a B1, on peut construire une s√©quence √† partir de B1
        if 1 in borne_numbers:
            print("   ‚úÖ B1 trouv√© - Construction s√©quence √† partir de B1")
            return self._build_sequence_from_b1(borne_numbers, borne_dict)
        
        # Cas 2: Si on n'a pas B1 mais on a des bornes cons√©cutives
        else:
            print("   ‚ö†Ô∏è  B1 manquant - Recherche de s√©quences cons√©cutives")
            return self._build_consecutive_sequence(borne_numbers, borne_dict)
    
    def _build_sequence_from_b1(self, borne_numbers: List[int], borne_dict: Dict[int, Dict]) -> List[Dict]:
        """Construit une s√©quence logique √† partir de B1"""
        
        valid_coords = []
        
        # Commencer par B1
        valid_coords.append(borne_dict[1])
        
        # Ajouter les bornes cons√©cutives
        current = 1
        for num in sorted(borne_numbers):
            if num == current + 1:
                valid_coords.append(borne_dict[num])
                current = num
            elif num > current + 1:
                # Gap dans la s√©quence - on s'arr√™te ici pour la logique stricte
                print(f"   ‚ö†Ô∏è  Gap d√©tect√©: B{current} ‚Üí B{num} (manque B{current+1})")
                break
        
        return valid_coords
    
    def _build_consecutive_sequence(self, borne_numbers: List[int], borne_dict: Dict[int, Dict]) -> List[Dict]:
        """Construit la plus longue s√©quence cons√©cutive possible"""
        
        # Trouver la plus longue s√©quence cons√©cutive
        longest_sequence = []
        current_sequence = []
        
        for i, num in enumerate(sorted(borne_numbers)):
            if not current_sequence or num == current_sequence[-1] + 1:
                current_sequence.append(num)
            else:
                if len(current_sequence) > len(longest_sequence):
                    longest_sequence = current_sequence.copy()
                current_sequence = [num]
        
        # V√©rifier la derni√®re s√©quence
        if len(current_sequence) > len(longest_sequence):
            longest_sequence = current_sequence.copy()
        
        # Construire les coordonn√©es pour la s√©quence la plus longue
        valid_coords = []
        for num in longest_sequence:
            valid_coords.append(borne_dict[num])
        
        if longest_sequence:
            print(f"   ‚úÖ S√©quence cons√©cutive la plus longue: B{longest_sequence[0]} √† B{longest_sequence[-1]}")
        
        return valid_coords
    
    def _analyze_sequence_logic(self, coordinates: List[Dict]) -> Dict:
        """Analyse la logique de la s√©quence finale"""
        
        if not coordinates:
            return {'valid': False, 'reason': 'Aucune coordonn√©e'}
        
        # Extraire les num√©ros
        numbers = []
        for coord in coordinates:
            try:
                num = int(coord['borne'][1:])
                numbers.append(num)
            except:
                continue
        
        numbers.sort()
        
        analysis = {
            'valid': True,
            'sequence': [f'B{n}' for n in numbers],
            'start': numbers[0] if numbers else None,
            'end': numbers[-1] if numbers else None,
            'count': len(numbers),
            'consecutive': True,
            'missing': []
        }
        
        # V√©rifier la cons√©cutivit√©
        if numbers:
            expected = list(range(numbers[0], numbers[-1] + 1))
            missing = [n for n in expected if n not in numbers]
            
            if missing:
                analysis['consecutive'] = False
                analysis['missing'] = [f'B{n}' for n in missing]
        
        # V√©rifier la logique (pas de B2 sans B1, etc.)
        if numbers and numbers[0] != 1:
            if numbers[0] > 1:
                analysis['logic_issue'] = f"S√©quence commence par B{numbers[0]} au lieu de B1"
        
        return analysis

def test_sequence_logical_extractor():
    """Test de l'extracteur avec validation de s√©quence logique"""
    
    print("üß† TEST EXTRACTEUR AVEC S√âQUENCE LOGIQUE")
    print("="*60)
    print("‚ö†Ô∏è  R√àGLE: Pas de B2 sans B1, pas de B3 sans B1-B2, etc.")
    
    extractor = SequenceLogicalExtractor()
    
    # Fichiers de test
    test_files = [
        "Testing Data/leve212.png",  # Cas probl√©matique: B2, B4, B6, B7, B8 sans B1
        "Testing Data/leve275.png",  # Cas: B3, B4 sans B1, B2
        "Testing Data/leve297.png",  # Cas: B1, B2, B3, B4 (s√©quence logique)
        "Testing Data/leve298.png",  # Cas: B1, B2, B3, B4 (s√©quence logique)
    ]
    
    for file_path in test_files:
        if not os.path.exists(file_path):
            continue
            
        filename = os.path.basename(file_path)
        print(f"\n{'='*60}")
        print(f"üß† TEST LOGIQUE: {filename}")
        print(f"{'='*60}")
        
        try:
            # Test avec mode agressif pour avoir le maximum de coordonn√©es
            coords = extractor.extract_coordinates_with_logical_sequence(file_path, mode='aggressive')
            
            # Analyse de la logique
            analysis = extractor._analyze_sequence_logic(coords)
            
            print(f"\nüéØ R√âSULTAT LOGIQUE {filename}:")
            print(f"   Coordonn√©es: {len(coords)}")
            print(f"   S√©quence: {analysis['sequence']}")
            print(f"   Logiquement valide: {'‚úÖ' if analysis['valid'] else '‚ùå'}")
            
            if 'logic_issue' in analysis:
                print(f"   ‚ö†Ô∏è  Probl√®me logique: {analysis['logic_issue']}")
            
            if not analysis['consecutive']:
                print(f"   ‚ùå Manquantes: {analysis['missing']}")
            
            # Afficher les coordonn√©es finales
            if coords:
                print(f"\nüìç Coordonn√©es logiquement valid√©es:")
                for coord in coords:
                    print(f"      {coord['borne']}: X={coord['x']:.2f}, Y={coord['y']:.2f}")
            
        except Exception as e:
            print(f"‚ùå Erreur sur {filename}: {e}")
    
    print(f"\n{'='*60}")
    print(f"üí° CONCLUSION LOGIQUE")
    print(f"{'='*60}")
    print(f"‚úÖ L'extracteur garantit maintenant la coh√©rence logique")
    print(f"‚úÖ Pas de B2 sans B1, pas de B3 sans B1-B2, etc.")
    print(f"‚úÖ S√©quences cons√©cutives privil√©gi√©es")
    print(f"‚úÖ Validation stricte de la logique des bornes")

if __name__ == "__main__":
    test_sequence_logical_extractor()
