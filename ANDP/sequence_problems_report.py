#!/usr/bin/env python3
"""
Rapport d√©taill√© des probl√®mes de s√©quence des bornes
Analyse sp√©cifique des cas comme leve212.png o√π les bornes ne sont pas compl√®tes
"""

import os
import sys
import json
from datetime import datetime

# Ajouter le chemin du projet Django
sys.path.append('.')
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'ANDP.settings')

import django
django.setup()

from ANDP_app.services.ocr_extraction import HybridOCRCorrector

def analyze_leve212_problem():
    """Analyse d√©taill√©e du probl√®me de leve212.png"""
    
    print("üîç ANALYSE D√âTAILL√âE - PROBL√àME DE S√âQUENCE leve212.png")
    print("="*60)
    
    extractor = HybridOCRCorrector()
    file_path = "Testing Data/leve212.png"
    
    if not os.path.exists(file_path):
        print(f"‚ùå Fichier non trouv√©: {file_path}")
        return
    
    # Extraction normale
    coordinates = extractor.extract_coordinates(file_path)
    
    print(f"üìÅ Fichier: leve212.png")
    print(f"üìç Coordonn√©es extraites: {len(coordinates)}")
    
    if coordinates:
        print("\nüîç BORNES TROUV√âES:")
        for coord in coordinates:
            print(f"   {coord['borne']}: X={coord['x']:.2f}, Y={coord['y']:.2f}")
        
        # Analyse de la s√©quence
        borne_numbers = []
        for coord in coordinates:
            if coord['borne'].startswith('B'):
                try:
                    num = int(coord['borne'][1:])
                    borne_numbers.append(num)
                except ValueError:
                    pass
        
        borne_numbers.sort()
        print(f"\nüìä ANALYSE DE S√âQUENCE:")
        print(f"   Bornes pr√©sentes: {borne_numbers}")
        print(f"   Plage: B{min(borne_numbers)} √† B{max(borne_numbers)}")
        
        # Identifier les bornes manquantes
        expected_range = list(range(1, max(borne_numbers) + 1))
        missing = [f"B{i}" for i in expected_range if i not in borne_numbers]
        
        if missing:
            print(f"   ‚ùå Bornes manquantes: {', '.join(missing)}")
        
        # Probl√®mes identifi√©s
        print(f"\n‚ö†Ô∏è  PROBL√àMES IDENTIFI√âS:")
        if 1 not in borne_numbers:
            print(f"   - Pas de B1 (borne de d√©part)")
        if len(missing) > 0:
            print(f"   - {len(missing)} bornes manquantes dans la s√©quence")
        if len(coordinates) < 4:
            print(f"   - Trop peu de bornes pour former un polygone complet")
    
    return coordinates

def create_sequence_problems_summary():
    """Cr√©e un r√©sum√© des probl√®mes de s√©quence courants"""
    
    print(f"\nüìã TYPES DE PROBL√àMES DE S√âQUENCE IDENTIFI√âS:")
    print("="*50)
    
    problems = {
        "missing_b1": {
            "description": "S√©quence ne commence pas par B1",
            "exemple": "B2, B6, B7, B8 (leve212.png)",
            "impact": "Impossible de d√©terminer le point de d√©part du polygone",
            "solution": "Am√©liorer la d√©tection de B1 ou inf√©rer sa position"
        },
        "missing_intermediate": {
            "description": "Bornes interm√©diaires manquantes",
            "exemple": "B1, B3, B5 (manque B2, B4)",
            "impact": "Polygone incomplet, g√©om√©trie incorrecte",
            "solution": "Patterns OCR plus robustes, d√©tection contextuelle"
        },
        "out_of_order": {
            "description": "Bornes dans le d√©sordre",
            "exemple": "B3, B1, B4, B2",
            "impact": "Ordre de parcours incorrect du polygone",
            "solution": "Tri automatique par position g√©ographique"
        },
        "gaps_in_sequence": {
            "description": "Trous dans la num√©rotation",
            "exemple": "B1, B2, B5, B6 (manque B3, B4)",
            "impact": "G√©om√©trie du polygone incorrecte",
            "solution": "Interpolation ou d√©tection des bornes manquantes"
        }
    }
    
    for problem_type, details in problems.items():
        print(f"\nüî∏ {details['description'].upper()}")
        print(f"   Exemple: {details['exemple']}")
        print(f"   Impact: {details['impact']}")
        print(f"   Solution: {details['solution']}")
    
    return problems

def propose_solutions():
    """Propose des solutions pour am√©liorer l'extraction"""
    
    print(f"\nüí° SOLUTIONS PROPOS√âES:")
    print("="*40)
    
    solutions = [
        {
            "titre": "Am√©lioration des patterns OCR",
            "description": "Ajouter des patterns sp√©cifiques pour capturer B1, B3, B4, B5",
            "implementation": [
                "Pattern pour 'B1' isol√© ou en d√©but de ligne",
                "Pattern pour bornes avec espacement variable",
                "Pattern pour bornes avec formatage diff√©rent"
            ]
        },
        {
            "titre": "Analyse contextuelle",
            "description": "Utiliser le contexte spatial pour identifier les bornes manquantes",
            "implementation": [
                "Analyser la distribution spatiale des bornes trouv√©es",
                "Inf√©rer la position des bornes manquantes",
                "Valider la coh√©rence g√©om√©trique"
            ]
        },
        {
            "titre": "Post-traitement intelligent",
            "description": "Corriger automatiquement les s√©quences incompl√®tes",
            "implementation": [
                "D√©tecter les trous dans la s√©quence",
                "Proposer des bornes manquantes probables",
                "R√©ordonner les bornes selon leur position g√©ographique"
            ]
        },
        {
            "titre": "Am√©lioration du pr√©processing",
            "description": "Optimiser le traitement d'image pour leve212.png",
            "implementation": [
                "Ajuster les param√®tres de binarisation",
                "Am√©liorer la d√©tection des zones de texte",
                "Filtrer le bruit sp√©cifique √† ce type d'image"
            ]
        }
    ]
    
    for i, solution in enumerate(solutions, 1):
        print(f"\n{i}. {solution['titre'].upper()}")
        print(f"   {solution['description']}")
        print("   Impl√©mentation:")
        for item in solution['implementation']:
            print(f"   - {item}")
    
    return solutions

def generate_improvement_script():
    """G√©n√®re un script d'am√©lioration pour les patterns OCR"""
    
    improved_patterns = """
# Patterns am√©lior√©s pour capturer plus de bornes

# Pattern sp√©cifique pour B1 (souvent en d√©but)
r'(?:^|\\s)(B1)\\s*[:\\s]*(\d{6,7}[.,]?\d{0,3})\\s*[,\\s]*(\d{6,7}[.,]?\d{0,3})'

# Pattern pour bornes avec num√©rotation continue
r'(B[1-9])\\s*[:\\s]*(\d{6,7}[.,]?\d{0,3})\\s*[,\\s]*(\d{6,7}[.,]?\d{0,3})'

# Pattern pour bornes isol√©es (B3, B4, B5)
r'\\b(B[3-5])\\s*[:\\s]*(\d{6,7}[.,]?\d{0,3})\\s*[,\\s]*(\d{6,7}[.,]?\d{0,3})'

# Pattern pour coordonn√©es sans borne explicite (inf√©rer B1, B3, etc.)
r'(?<!B\\d)\\s*(\d{6,7}[.,]?\d{0,3})\\s*[,\\s]*(\d{6,7}[.,]?\d{0,3})(?=\\s|$)'
"""
    
    print(f"\nüîß PATTERNS OCR AM√âLIOR√âS:")
    print("="*40)
    print(improved_patterns)
    
    return improved_patterns

def create_detailed_report():
    """Cr√©e un rapport d√©taill√© complet"""
    
    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
    report_file = f"sequence_problems_report_{timestamp}.md"
    
    with open(report_file, 'w', encoding='utf-8') as f:
        f.write("# Rapport des Probl√®mes de S√©quence des Bornes\n\n")
        f.write(f"**Date:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n")
        
        f.write("## üîç Cas d'√âtude: leve212.png\n\n")
        f.write("### Probl√®me Identifi√©\n")
        f.write("- **Bornes extraites:** B2, B6, B7, B8\n")
        f.write("- **Bornes manquantes:** B1, B3, B4, B5\n")
        f.write("- **Impact:** Polygone incomplet, impossible de d√©terminer la g√©om√©trie correcte\n\n")
        
        f.write("### Analyse Technique\n")
        f.write("- **Texte OCR d√©tect√©:** 66 √©l√©ments de texte\n")
        f.write("- **Patterns utilis√©s:** 4 patterns de reconnaissance\n")
        f.write("- **Taux de capture:** 50% des bornes attendues\n\n")
        
        f.write("## üìä Types de Probl√®mes\n\n")
        f.write("1. **Bornes manquantes en d√©but de s√©quence** (B1 absent)\n")
        f.write("2. **Trous dans la s√©quence** (B3, B4, B5 manquants)\n")
        f.write("3. **Patterns OCR insuffisants** pour certains formats\n")
        f.write("4. **Qualit√© d'image** affectant la reconnaissance\n\n")
        
        f.write("## üí° Solutions Recommand√©es\n\n")
        f.write("### Solution Imm√©diate\n")
        f.write("1. Ajouter des patterns sp√©cifiques pour B1, B3, B4, B5\n")
        f.write("2. Am√©liorer le pr√©processing pour leve212.png\n")
        f.write("3. Impl√©menter une d√©tection contextuelle\n\n")
        
        f.write("### Solution Long Terme\n")
        f.write("1. D√©velopper un mod√®le ML sp√©cialis√©\n")
        f.write("2. Cr√©er une base de donn√©es de r√©f√©rence\n")
        f.write("3. Impl√©menter une validation g√©om√©trique\n\n")
        
        f.write("## üéØ Objectifs de Performance\n\n")
        f.write("- **Taux de capture cible:** 95% des bornes\n")
        f.write("- **S√©quences compl√®tes:** 80% des fichiers\n")
        f.write("- **Polygones ferm√©s:** 70% des extractions\n\n")
    
    print(f"\nüìÑ Rapport d√©taill√© g√©n√©r√©: {report_file}")
    return report_file

if __name__ == "__main__":
    # Analyse du cas leve212.png
    coordinates = analyze_leve212_problem()
    
    # R√©sum√© des types de probl√®mes
    problems = create_sequence_problems_summary()
    
    # Solutions propos√©es
    solutions = propose_solutions()
    
    # Patterns am√©lior√©s
    patterns = generate_improvement_script()
    
    # Rapport d√©taill√©
    report_file = create_detailed_report()
    
    print(f"\n‚úÖ Analyse termin√©e!")
    print(f"üìã Probl√®mes identifi√©s: {len(problems)}")
    print(f"üí° Solutions propos√©es: {len(solutions)}")
    print(f"üìÑ Rapport g√©n√©r√©: {report_file}")
