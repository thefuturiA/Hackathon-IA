#!/usr/bin/env python
"""
Test complet du syst√®me ANDF - Analyse Spatiale Intelligente
V√©rifie tous les composants: OCR, Spatial, API, Frontend Integration
"""

import os
import sys
import django
import json
from pathlib import Path

# Configuration Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'ANDP.settings')
django.setup()

from django.test import Client
from django.core.files.uploadedfile import SimpleUploadedFile
from ANDP_app.services.andf_layers import ANDFLayerService
from ANDP_app.services.spatial_verification import IntelligentSpatialAnalyzer
from ANDP_app.services.ocr_integration import OCRSpatialIntegrator
from django.contrib.gis.geos import Polygon


class ANDFSystemTester:
    """Testeur complet du syst√®me ANDF"""
    
    def __init__(self):
        self.client = Client()
        self.test_results = []
    
    def run_all_tests(self):
        """Lance tous les tests"""
        print("üöÄ ANDP - Test Complet du Syst√®me d'Analyse Spatiale Intelligente")
        print("=" * 70)
        
        tests = [
            ("üóÑÔ∏è Base de donn√©es et couches ANDF", self.test_database_layers),
            ("üß† Analyseur spatial intelligent", self.test_spatial_analyzer),
            ("üì° Endpoints API REST", self.test_api_endpoints),
            ("üó∫Ô∏è Endpoints GeoJSON pour cartes", self.test_geojson_endpoints),
            ("üîó Int√©gration OCR + Spatial", self.test_ocr_integration),
            ("‚ö†Ô∏è Syst√®me d'alerte intelligent", self.test_alert_system),
            ("üåê Configuration frontend React", self.test_frontend_config),
        ]
        
        for test_name, test_func in tests:
            print(f"\n{test_name}")
            print("-" * 50)
            try:
                result = test_func()
                self.test_results.append((test_name, result))
            except Exception as e:
                print(f"‚ùå Erreur: {e}")
                self.test_results.append((test_name, False))
        
        self.print_summary()
    
    def test_database_layers(self):
        """Test des couches ANDF et base de donn√©es"""
        try:
            # Test du service ANDF
            layer_info = ANDFLayerService.get_layer_info()
            print(f"‚úÖ Service ANDF initialis√©: {len(layer_info)} couches configur√©es")
            
            available_layers = [name for name, info in layer_info.items() if info.get('available')]
            print(f"‚úÖ Couches disponibles: {len(available_layers)}")
            
            for layer_name in available_layers:
                info = layer_info[layer_name]
                print(f"  üìä {layer_name}: {info.get('feature_count', 0)} features")
            
            if len(available_layers) == 0:
                print("‚ö†Ô∏è Aucune couche import√©e - Ex√©cuter: python manage.py import_layer")
            
            return True
            
        except Exception as e:
            print(f"‚ùå Erreur couches ANDF: {e}")
            return False
    
    def test_spatial_analyzer(self):
        """Test de l'analyseur spatial intelligent"""
        try:
            analyzer = IntelligentSpatialAnalyzer()
            print("‚úÖ Analyseur spatial initialis√©")
            
            # Test avec g√©om√©trie de Cotonou (zone avec donn√©es)
            test_coords = [
                (430000, 705000),
                (430100, 705000),
                (430100, 705100),
                (430000, 705100),
                (430000, 705000)
            ]
            
            test_polygon = Polygon(test_coords, srid=32631)
            print(f"‚úÖ G√©om√©trie de test cr√©√©e: {test_polygon.area:.2f} m¬≤")
            
            # Test des seuils de d√©tection
            thresholds = analyzer.OVERLAP_THRESHOLDS
            print(f"‚úÖ Seuils configur√©s: {thresholds}")
            
            return True
            
        except Exception as e:
            print(f"‚ùå Erreur analyseur spatial: {e}")
            return False
    
    def test_api_endpoints(self):
        """Test des endpoints API principaux"""
        try:
            # Test page d'accueil
            response = self.client.get('/')
            print(f"‚úÖ Page d'accueil: {response.status_code}")
            
            # Test documentation API
            try:
                response = self.client.get('/api/docs/')
                if response.status_code == 200:
                    data = response.json()
                    print(f"‚úÖ Documentation API: {data.get('title', 'OK')}")
                else:
                    print(f"‚ö†Ô∏è Documentation API: {response.status_code}")
            except:
                print("‚ö†Ô∏è Documentation API non accessible (normal si migrations non faites)")
            
            # Test health check
            try:
                response = self.client.get('/api/health/')
                if response.status_code == 200:
                    print("‚úÖ Health check accessible")
                else:
                    print(f"‚ö†Ô∏è Health check: {response.status_code}")
            except:
                print("‚ö†Ô∏è Health check non accessible (normal si migrations non faites)")
            
            return True
            
        except Exception as e:
            print(f"‚ùå Erreur endpoints API: {e}")
            return False
    
    def test_geojson_endpoints(self):
        """Test des endpoints GeoJSON pour le frontend"""
        try:
            # Test info couches
            try:
                response = self.client.get('/api/layers/info/')
                if response.status_code == 200:
                    data = response.json()
                    print(f"‚úÖ Info couches: {data.get('total_layers', 0)} couches")
                else:
                    print(f"‚ö†Ô∏è Info couches: {response.status_code}")
            except:
                print("‚ö†Ô∏è Info couches non accessible")
            
            # Test GeoJSON couche (si disponible)
            try:
                response = self.client.get('/api/layers/parcelles/geojson/?limit=1')
                if response.status_code == 200:
                    data = response.json()
                    print(f"‚úÖ GeoJSON parcelles: {len(data.get('features', []))} feature(s)")
                else:
                    print(f"‚ö†Ô∏è GeoJSON parcelles: {response.status_code}")
            except:
                print("‚ö†Ô∏è GeoJSON parcelles non accessible (normal si couches non import√©es)")
            
            return True
            
        except Exception as e:
            print(f"‚ùå Erreur endpoints GeoJSON: {e}")
            return False
    
    def test_ocr_integration(self):
        """Test de l'int√©gration OCR"""
        try:
            integrator = OCRSpatialIntegrator()
            print("‚úÖ Int√©grateur OCR + Spatial initialis√©")
            
            # V√©rifier les fonctions utilitaires
            from ANDP_app.services.ocr_integration import validate_benin_coords, validate_coordinate_format
            
            # Test coordonn√©es valides B√©nin
            valid_coords = validate_benin_coords(430000, 705000)  # Cotonou
            print(f"‚úÖ Validation coordonn√©es B√©nin: {valid_coords}")
            
            # Test format coordonn√©es
            valid_format = validate_coordinate_format(430000.5, 705000.5)
            print(f"‚úÖ Validation format coordonn√©es: {valid_format}")
            
            return True
            
        except Exception as e:
            print(f"‚ùå Erreur int√©gration OCR: {e}")
            return False
    
    def test_alert_system(self):
        """Test du syst√®me d'alerte intelligent"""
        try:
            from ANDP_app.services.spatial_verification import AlertSystem
            print("‚úÖ Syst√®me d'alerte initialis√©")
            
            # Test des types d'alerte configur√©s
            from ANDP_app.models import SpatialConflict
            conflict_types = [choice[0] for choice in SpatialConflict.CONFLICT_TYPES]
            print(f"‚úÖ Types de conflits configur√©s: {len(conflict_types)}")
            for conflict_type in conflict_types:
                print(f"  üö® {conflict_type}")
            
            return True
            
        except Exception as e:
            print(f"‚ùå Erreur syst√®me d'alerte: {e}")
            return False
    
    def test_frontend_config(self):
        """Test de la configuration pour le frontend React"""
        try:
            from django.conf import settings
            
            # V√©rifier CORS
            cors_enabled = 'corsheaders' in settings.INSTALLED_APPS
            print(f"‚úÖ CORS configur√©: {cors_enabled}")
            
            # V√©rifier REST Framework
            drf_enabled = 'rest_framework' in settings.INSTALLED_APPS
            print(f"‚úÖ Django REST Framework: {drf_enabled}")
            
            # V√©rifier GIS
            gis_enabled = 'django.contrib.gis' in settings.INSTALLED_APPS
            print(f"‚úÖ Django GIS: {gis_enabled}")
            
            # V√©rifier configuration media
            media_configured = hasattr(settings, 'MEDIA_URL') and hasattr(settings, 'MEDIA_ROOT')
            print(f"‚úÖ Configuration media: {media_configured}")
            
            return True
            
        except Exception as e:
            print(f"‚ùå Erreur configuration frontend: {e}")
            return False
    
    def test_sample_document(self):
        """Test avec un document d'exemple"""
        try:
            # Chercher un document de test
            test_files = list(Path("Testing Data").glob("*.png"))[:1]
            
            if not test_files:
                print("‚ö†Ô∏è Aucun document de test trouv√© dans Testing Data/")
                return True
            
            test_file = test_files[0]
            print(f"üìÑ Test avec: {test_file.name}")
            
            # Simuler un upload
            with open(test_file, 'rb') as f:
                file_content = f.read()
            
            uploaded_file = SimpleUploadedFile(
                test_file.name,
                file_content,
                content_type='image/png'
            )
            
            # Test de l'endpoint upload
            response = self.client.post('/api/upload/', {
                'file': uploaded_file
            })
            
            print(f"‚úÖ Test upload: {response.status_code}")
            
            if response.status_code == 201:
                data = response.json()
                upload_id = data.get('upload_id')
                print(f"‚úÖ Upload ID g√©n√©r√©: {upload_id}")
                
                # Test statut
                status_response = self.client.get(f'/api/upload/{upload_id}/status/')
                print(f"‚úÖ Test statut: {status_response.status_code}")
            
            return True
            
        except Exception as e:
            print(f"‚ùå Erreur test document: {e}")
            return False
    
    def print_summary(self):
        """Affiche le r√©sum√© des tests"""
        print("\n" + "=" * 70)
        print("üìä R√âSUM√â DES TESTS")
        print("=" * 70)
        
        passed = sum(1 for _, result in self.test_results if result)
        total = len(self.test_results)
        
        for test_name, result in self.test_results:
            status = "‚úÖ R√âUSSI" if result else "‚ùå √âCHEC"
            print(f"{status} {test_name}")
        
        print(f"\nüìà Score: {passed}/{total} tests r√©ussis")
        
        if passed == total:
            print("\nüéâ SYST√àME ANDF OP√âRATIONNEL !")
            print("\nüìã Prochaines √©tapes pour d√©ploiement:")
            print("1. Terminer les migrations: python manage.py migrate")
            print("2. Importer les couches: python manage.py import_layer")
            print("3. Lancer le serveur: python manage.py runserver")
            print("4. Int√©grer avec React frontend")
        else:
            print(f"\n‚ö†Ô∏è {total - passed} test(s) en √©chec")
            print("V√©rifiez la configuration avant le d√©ploiement.")
        
        print("\nüîó API Endpoints pour React + Leaflet:")
        print("- POST /api/upload/ - Upload et analyse")
        print("- GET /api/upload/{id}/status/ - Statut temps r√©el")
        print("- GET /api/upload/{id}/geojson/ - Donn√©es carte")
        print("- GET /api/upload/{id}/conflicts/ - Conflits")
        print("- GET /api/comparison/{id}/ - Comparaison cadastrale")


def main():
    """Fonction principale"""
    tester = ANDFSystemTester()
    tester.run_all_tests()


if __name__ == "__main__":
    main()
